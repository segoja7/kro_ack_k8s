apiVersion: kro.run/v1alpha1
kind: ResourceGraphDefinition
metadata:
  name: retailstoresampleappstack.kro.run
spec:
  schema:
    apiVersion: v1alpha1
    kind: RetailStoreSampleAppStack
    spec:
      name: string
    status:
      networkingInfo:
        vpcID: ${vpc.status.vpcID}
  resources:
  - id: vpc
    template:
      apiVersion: ec2.services.k8s.aws/v1alpha1
      kind: VPC
      metadata:
        name: vpc-string
      spec:
        cidrBlocks:
        - '10.0.1.0/20'
        enableDNSHostnames: true
        enableDNSSupport: true
        instanceTenancy: default
        tags:
        - key: ManagedBy
          value: ec2-controller
        - key: Name
          value: vpc-string
  - id: appprivatesubnetaz1
    template:
      apiVersion: ec2.services.k8s.aws/v1alpha1
      kind: Subnet
      metadata:
        name: appprivatesubnetaz1
      spec:
        cidrBlock: '10.0.0.0/24'
        vpcID: ${vpc.status.vpcID}
        mapPublicIPOnLaunch: false
        tags:
        - key: ManagedBy
          value: ec2-controller
  - id: appprivatesubnetaz2
    template:
      apiVersion: ec2.services.k8s.aws/v1alpha1
      kind: Subnet
      metadata:
        name: appprivatesubnetaz2
      spec:
        cidrBlock: '10.0.1.0/24'
        vpcID: ${vpc.status.vpcID}
        mapPublicIPOnLaunch: false
        tags:
        - key: ManagedBy
          value: ec2-controller
  - id: publicsubnetaz1
    template:
      apiVersion: ec2.services.k8s.aws/v1alpha1
      kind: Subnet
      metadata:
        name: publicsubnetaz1
      spec:
        cidrBlock: '10.0.2.0/24'
        vpcID: ${vpc.status.vpcID}
        mapPublicIPOnLaunch: true
        tags:
        - key: ManagedBy
          value: ec2-controller
  - id: publicsubnetaz2
    template:
      apiVersion: ec2.services.k8s.aws/v1alpha1
      kind: Subnet
      metadata:
        name: publicsubnetaz2
      spec:
        cidrBlock: '10.0.3.0/24'
        vpcID: ${vpc.status.vpcID}
        mapPublicIPOnLaunch: true
        tags:
        - key: ManagedBy
          value: ec2-controller
  - id: internetgateway
    template:
      apiVersion: ec2.services.k8s.aws/v1alpha1
      kind: InternetGateway
      metadata:
        name: internetgatewayretail
      spec:
        vpc: ${vpc.status.vpcID}
        tags:
        - key: ManagedBy
          value: ec2-controller
        - key: Name
          value: internetgatewayretail
  - id: routetablepublic
    template:
      apiVersion: ec2.services.k8s.aws/v1alpha1
      kind: RouteTable
      metadata:
        name: routetablepublic
      spec:
        vpcID: ${vpc.status.vpcID}
        routes:
        - destinationCIDRBlock: '0.0.0.0/0'
          gatewayID: ${internetgateway.status.internetGatewayID}
        tags:
        - key: ManagedBy
          value: ec2-controller
        - key: Name
          value: routetablepublic-retail
  - id: routetableprivate
    template:
      apiVersion: ec2.services.k8s.aws/v1alpha1
      kind: RouteTable
      metadata:
        name: routetableprivate
      spec:
        vpcID: ${vpc.status.vpcID}
        routes:
        - destinationCIDRBlock: '0.0.0.0/0'
          natGatewayID: ${natgateway.status.natGatewayID}
        tags:
        - key: ManagedBy
          value: ec2-controller
        - key: Name
          value: routetableprivate-retail
  - id: natgateway
    template:
      apiVersion: ec2.services.k8s.aws/v1alpha1
      kind: NATGateway
      metadata:
        name: natgatewayretail
      spec:
        subnetRef:
          from:
            name: appprivatesubnetaz1
        allocationID: ${elasticipaddress.status.allocationID}
        tags:
        - key: ManagedBy
          value: ec2-controller
        - key: Name
          value: natgatewayretail
  - id: elasticipaddress
    template:
      apiVersion: ec2.services.k8s.aws/v1alpha1
      kind: ElasticIPAddress
      metadata:
        name: elasticipaddressretail
      spec:
        tags:
        - key: ManagedBy
          value: ec2-controller
        - key: Name
          value: elasticipaddressretail
